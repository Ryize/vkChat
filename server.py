from vk_api.exceptions import ApiError
from vk_api.bot_longpoll import VkBotMessageEvent

from pyeasyvkbot.core.utils import FileDB
from pyeasyvkbot.release import VkBot


class Server(VkBot):
    """
    All the bot logic is the upper level of the system, inherited from the parents
    providing the necessary functionality and allowing you to focus only on writing business logic
    """

    def __init__(self, *args, **kwargs):
        self.db = FileDB(file_name='chat.txt')
        super().__init__(*args, **kwargs)

    def command_ping(self, send_id: int) -> None:
        self.send_msg(send_id, message='–ü–æ–Ω–≥!')

    def command_hide_keyboard(self, send_id: int):
        self.send_msg(send_id, message='–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞!', keyboard=self.keyboard.hide_keyboard())

    def command_return_keyboard(self, send_id: int):
        self.send_msg(send_id, message='‚úåÔ∏è–í–µ—Ä–Ω—É–ª –≤–∞–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!', keyboard=self.keyboard.get_standart_keyboard())

    def command_helpop(self, send_id: int):
        text_in_msg = self.get_command_text(self._text_in_msg, self._command_args)
        if not text_in_msg:
            self.send_msg(send_id,
                          message=f'‚õîÔ∏è –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!')
            return
        self.send_msg(send_id,
                      message=f'‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ–≥–æ –∏ –æ—Ç–≤–µ—Ç–∏—Ç –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')
        self.send_admin_msg(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {text_in_msg}\n\nüìû–î–ª—è –æ—Ç–≤–µ—Ç–∞ –µ–º—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–∞–∫–æ–π id: {send_id}")

    def start_chat(self, send_id: int):
        data_in_file = self.db.splitter()
        for number, line in enumerate(data_in_file):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏—â–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, —Ç–æ –º—ã –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –∑–∞–Ω–æ–≤–æ –≤ —Ñ–∞–π–ª
            if line[-1] == '0' and line[0] == str(send_id):
                self.send_msg(send_id, message=f'–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...')
                break
            if line[-1] == '0' and line[0] != str(send_id):
                data_in_file[number][-1] = str(send_id)
                list_with_data = list(map(lambda i: '/'.join(i), data_in_file))
                self.db.write("\n".join(list_with_data), 'w')
                self.send_msg(send_id, message=f'–í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥!\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—èüòâ')
                break
        else:
            self.db.write(f'{send_id}/0')
            self.send_msg(send_id, message=f'–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...')

    def send_chat(self, event: VkBotMessageEvent):
        data_in_file = self.db.splitter()
        data_in_file.reverse()
        send_id = str(event.object.peer_id)
        for number, line in enumerate(data_in_file):
            if line[0] == send_id and line[-1] != '0':
                companion_id = line[-1]
                break
            if line[-1] == send_id and line[0] != '0':
                companion_id = line[0]
                break
        else:
            self.start_chat(int(send_id))
            return
        if not self.send_msg(companion_id, message=event.object.text):
            self.send_msg(int(send_id), message='‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞!')
